{"pageProps":{"title":"Mock promisified AWS service operation calls with Jest","content":"\nAt [Mbanq Cloud](https://mbanq.com/cloud) we run most of our services on AWS and try to use AWS Lambda as much as possible.\n\nA while ago I’ve been working on the a small npm package that should have helped us to make use of SSM and [KMS](https://aws.amazon.com/kms/) to manage our system configuration. SSM and KMS play nicely together as the most of the AWS services.\n\nIn order to test the newly written npm package, I had to mock the promisified version of the `ssm.getParameters(request)`\n\n```js\nconst AWS = require('aws-sdk')\nconst ssm = AWS.SSM({ region: 'eu-west-1 })\nssm.getParameters(request).promise() // we have to mock the response from this call\n```\n\nThere are different ways of mocking the AWS JS SDK calls. For example there is the [aws-mock-sdk](https://github.com/dwyl/aws-sdk-mock) package from the very cool [DWYL](https://dwyl.com/) guys. I decided to go with pure Jest implementation though.\n\n![](https://cdn-images-1.medium.com/max/2000/1*yZyG4rhfvTehkTsKtLxD9Q.png)\n\nThere are some things to be taken into account to make the SSM’s functionality testable:\n\n- Use **ssm** as a parameter in your function call, e.g. const `load = (ssm, keys, expiryMs)` It will help you to use the mocked ssm whenever you write your tests. Sure you could also `module.exports = { ssm }` alongside other functions you want to export but I didn’t really like this idea\n- If you wanna check for the errors thrown inside of an `async/await` function you have to use: `expect(yourFunc()).rejects.toEqual(new Error('Error Message'))` . The regular `expect(yourFunc()).toThrowError('Error Message')` [**WON’T WORK](https://github.com/facebook/jest/issues/1700#issuecomment-377890222)**\n\nOk, now you’re probably asking yourself:\n> How the heck do you mock the promisified AWS service operation calls?\n\nYou will either want to mock a successful response from the `ssm.getParameters(request).promise()` or the `Error` thrown by the this function call.\n\n### Successful response\nFirst, create a js object with the promise key and mock the value of the promise with the `jest.fn().mockImplementation()` that will return a Promise that when resolved return a successful response.\n\nThen return the created `ssmPromise` whenever you make a call to `getParameters()` function.\n\n```js\nconst AWS = require('aws-sdk')\nlet ssm = new AWS.SSM()\nconst ssmPromise = {\n  promise: jest.fn().mockImplementation((request) => {\n    return new Promise((resolve, reject) => {\n      const response = {\n        Parameters: [\n          {\n            Name: 'bar',\n            Type: 'String',\n            Value: 'barfoorista',\n            Version: 1,\n            LastModifiedDate: '2018-08-22T13:49:55.717Z',\n            ARN: 'arn:aws:ssm:eu-west-1:whatever:parameter/bar'\n          },\n          {\n            Name: 'foo',\n            Type: 'String',\n            Value: 'foobarista',\n            Version: 1,\n            LastModifiedDate: '2018-08-22T13:49:41.486Z',\n            ARN: 'arn:aws:ssm:eu-west-1:whatever:parameter/foo'\n           }\n         ],\n         InvalidParameters: []\n       }\n       resolve(response)\n     })\n  })\n}\nssm = { getParameters: () => { return ssmPromise } }\n```\n\n### Throw an Error\n\nBy using the ssm instance you created at the top of your test, you can also mock the `ssm.getParameters()` in one go.\n\nHere is an example of how you could mock `ssm.getParameters()` throwing an Error\n\n```js\nssm = {\n  getParameters: () => {\n    return {\n      promise: jest.fn().mockImplementation((request) => {\n        return new Promise((resolve, reject) => {\n          return reject(new Error('foobar'))\n        }).catch(() => console.log('Ok'))\n      })\n    }\n  }\n}\n```\n\nIn a [gist](https://gist.github.com/igorkosta/6dae64ca2ababed7bec95255b2252842#file-sreda-test-js) (pun intended) you can see part of the test, we’re using to test our package.\n\nHere is the content of the `gist` for you to check out:\n```js\n/* eslint-env jest */\n'use strict'\n\nconst { read, keys } = require('../sreda')\nconst AWS = require('aws-sdk')\nlet ssm = new AWS.SSM()\n\nvar ssmPromise = {\n  promise: jest.fn().mockImplementation((request) => {\n    return new Promise((resolve, reject) => {\n      const response = {\n        Parameters: [\n          {\n            Name: 'bar',\n            Type: 'String',\n            Value: 'barfoorista',\n            Version: 1,\n            LastModifiedDate: '2018-08-22T13:49:55.717Z',\n            ARN: 'arn:aws:ssm:eu-west-1:whatever:parameter/bar'\n          },\n          {\n            Name: 'foo',\n            Type: 'String',\n            Value: 'foobarista',\n            Version: 1,\n            LastModifiedDate: '2018-08-22T13:49:41.486Z',\n            ARN: 'arn:aws:ssm:eu-west-1:whatever:parameter/foo'\n          }\n        ],\n        InvalidParameters: []\n      }\n      resolve(response)\n    })\n  })\n}\nssm = { getParameters: () => { return ssmPromise } }\n\ndescribe('mock AWS.SSM()', () => {\n  beforeAll(async () => {\n    process.env.NODE_ENV = 'production'\n  })\n\n  it(`throws an error if no keys are providerd`, async () => {\n    function throwsErr () {\n      read(ssm, [])\n    }\n    expect(throwsErr).toThrowError(`You need to provide a non-empty array of config keys`)\n  })\n\n  it(`throws an error if some keys are missing`, async () => {\n    expect(keys(ssm, ['foobar'])).rejects.toEqual(new Error(`Missing SSM Parameter Store keys: foobar`))\n  })\n\n  it(`throws an error when ssm is throwing one`, async () => {\n    ssm = {\n      getParameters: () => {\n        return {\n          promise: jest.fn().mockImplementation((request) => {\n            return new Promise((resolve, reject) => {\n              return reject(new Error('foobar'))\n            }).catch(() => console.log('Ok'))\n          })\n        }\n      }\n    }\n    expect(keys(ssm, ['foo'])).rejects.toEqual(new Error(`TypeError: Cannot destructure property \\`Parameters\\` of 'undefined' or 'null'.`))\n  })\n})\n```\n\nThe `sreda` package is in the dev mode. Check it out if you would like to use\nit in you serverless project: https://www.npmjs.com/package/sreda\n\n```bash\nyarn add sreda\n\nnpm i -S sreda\n```\n"},"__N_SSG":true}